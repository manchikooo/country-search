const filtersState = {
    name: "",
    languages: [],
    regions: []
};

let currentCountries = [];

document.addEventListener("DOMContentLoaded", async () => {
    // –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã
    const response = await fetch("https://restcountries.com/v3.1/all");
    //–ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ–∫—É—â–∏–µ —Å—Ç—Ä–∞–Ω—ã
    currentCountries = await response.json();
    // –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω—ã
    renderCountries();

    setupNameFilter();
    setupLanguageFilter();
    setupRegionFilter();
});

// üëá –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
async function applyFilters() {
    try {
        const queries = [];

        if (filtersState.name) {
            queries.push(fetch(`https://restcountries.com/v3.1/name/${encodeURIComponent(filtersState.name)}`).then(r => r.ok ? r.json() : []));
        }

        for (const lang of filtersState.languages) {
            queries.push(fetch(`https://restcountries.com/v3.1/lang/${lang}`).then(r => r.ok ? r.json() : []));
        }

        for (const region of filtersState.regions) {
            queries.push(fetch(`https://restcountries.com/v3.1/region/${region}`).then(r => r.ok ? r.json() : []));
        }

        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë
        if (queries.length === 0) {
            const res = await fetch("https://restcountries.com/v3.1/all");
            currentCountries = await res.json();
            renderCountries();
            return;
        }

        const results = await Promise.all(queries);
        const unique = intersectCountries(results);
        currentCountries = unique;
        console.log("–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Å—Ç—Ä–∞–Ω:", unique.length);

        renderCountries();
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:", error);
        renderCountries([]);
    }
}

// –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è —Å—Ç—Ä–∞–Ω—ã
function intersectCountries(countryLists) {
    if (!countryLists.length) return [];

    const key = country => country.cca3 || country.name.common;

    // –º–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤ –∫–ª—é—á–µ–π
    const keysOfTreeArrays = countryLists.map(list => {
        return list.map(key)
    });

    const firstList = countryLists[0];
    const result = [];

    firstList.forEach(country => {
        const countryKey = key(country);

        const inAll = keysOfTreeArrays.every(list => list.includes(countryKey));
        if (inAll) {
            result.push(country);
        }
    });

    return result;
}

function renderCountries() {
    const container = document.querySelector(".countries-grid");
    container.innerHTML = "";

    if (!currentCountries || currentCountries.length === 0) {
        container.classList.add("empty");
        container.innerHTML = `<p class="not-found">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>`;
        return;
    }

    currentCountries.forEach(country => {
        const name = country.translations?.rus?.official || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è";
        const capital = country.capital?.[0] || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö";
        const region = country.region || "–ù–µ—Ç —Ä–µ–≥–∏–æ–Ω–∞";
        const flag = country.flags?.png || "";

        const card = document.createElement("div");
        card.className = "card";
        card.innerHTML = `
            <img src="${flag}" alt="–§–ª–∞–≥ ${name}">
            <h3>${name}</h3>
            <p>–†–µ–≥–∏–æ–Ω: ${region}</p>
            <p>–°—Ç–æ–ª–∏—Ü–∞: ${capital}</p>
        `;
        container.appendChild(card);
    });
}

// —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞
function setupNameFilter() {
    const input = document.getElementById("titleSearch");
    let debounceTimer = null;

    // —Å–ª—É—à–∞—Ç–µ–ª—å –Ω–∞ –∏–ø—É—Ç –ø–æ–∏—Å–∫–∞
    input.addEventListener("input", () => {
        // —á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–π —Ç–∞–π–º–∞—É—Ç
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => {
            filtersState.name = input.value.trim();
            applyFilters();
        }, 400);
    });
}

// —Ñ–∏–ª—å—Ç—Ä –ø–æ —è–∑—ã–∫–∞
function setupLanguageFilter() {
    // —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã
    const checkboxes = document.querySelectorAll('.language-inputs input[type="checkbox"]');
    // –±–µ–∂–∏–º –ø–æ –Ω–∏–º –≤—Å–µ–º
    checkboxes.forEach(cb => {
        cb.addEventListener("change", () => {
            // –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –∫–∂–∞–¥—ã–π —á–µ–∫–±–æ–∫—Å —Å–ª—É—à–∞—Ç–µ–ª—å –∏ –≤—ã–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —è–∑—ã–∫–∞
            filtersState.languages = Array.from(checkboxes)
                .filter(c => c.checked)
                .map(c => c.dataset.lang);
            applyFilters();
        });
    });
}

function setupRegionFilter() {
    const checkboxes = document.querySelectorAll('.region-inputs input[type="checkbox"]');
    checkboxes.forEach(cb => {
        cb.addEventListener("change", () => {
            filtersState.regions = Array.from(checkboxes)
                .filter(c => c.checked)
                .map(c => c.dataset.region.toLowerCase());
            applyFilters();
        });
    });
}
